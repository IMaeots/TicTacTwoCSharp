@page "{gameName}"
@using Common.Entities
@using GameLogic
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model PlayGameModel

@{
    ViewData["Title"] = $"Playing game: {Model.GameName}";
}

<h2>
    @ViewData["Title"]
    <a href="javascript:void(0);" title="Share this game" onclick="copyGameLink('@Model.GameName')">
        <i class="bi bi-share-fill px-2 fs-2"></i>
    </a>
</h2>
<hr/>

@if (Model.Game.IsPasswordNeeded() && Model.UserPlayerType == null)
{
    <form method="get" class="text-center">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div>
            <label asp-for="Password">Enter Password:</label>
            <input asp-for="Password" class="form-control d-inline w-auto"/>
        </div>
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </form>
}
else
{
    <div asp-validation-summary="ModelOnly" class="text-danger text-center"></div>
    
    <div class="text-center mb-4">
        <div class="d-flex justify-content-center gap-4 mb-2">
            <div class="border px-3 py-2 rounded @(Model.Game.State.NextMoveBy == EGamePiece.Player1 ? "border-primary bg-light" : "border-secondary")">
                <strong>Player X</strong>: @Model.Game.State.Player1MarkersPlaced/@Model.Game.Configuration.NumberOfMarkers
            </div>
            <div class="border px-3 py-2 rounded @(Model.Game.State.NextMoveBy == EGamePiece.Player2 ? "border-primary bg-light" : "border-secondary")">
                <strong>Player O</strong>: @Model.Game.State.Player2MarkersPlaced/@Model.Game.Configuration.NumberOfMarkers
            </div>
        </div>

        <div class="mb-3">
            @if (Model.Game.IsBotsTurn(Model.UserPlayerType))
            {
                <form method="post" class="d-inline">
                    <button type="submit" name="bot" value="true" class="btn btn-primary">Ask Bot to make a move</button>
                    <input asp-for="UserPlayerType" value="@Model.UserPlayerType" type="hidden" />
                </form>
            }
            else if (Model.Game.Configuration.Mode == EGameMode.OnlineTwoPlayer && !Model.Game.IsUsersTurn(Model.UserPlayerType))
            {
                <button class="btn btn-outline-primary btn-sm" onclick="location.reload()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh Game
                </button>
            }
        </div>
    </div>

    <div class="position-relative mx-auto" style="width: 100%; max-width: 500px; margin-top: 50px; margin-bottom: 50px;">
        @if (Model.Game.CanPerformSpecialMoves() && Model.Game.IsUsersTurn(Model.UserPlayerType))
        {
            @if (Model.Game.State.GridY > 0)
            {
                <form method="post" class="position-absolute" style="top: -45px; left: 50%; transform: translateX(-50%);">
                    <button type="submit" class="btn btn-outline-secondary" name="move" value="@($"{Model.Game.State.GridX},{Model.Game.State.GridY-1}")">
                        <i class="bi bi-arrow-up"></i>
                    </button>
                    <input type="hidden" name="action" value="@EGameAction.MoveGrid" />
                </form>
            }
            
            @if (Model.Game.State.GridX > 0)
            {
                <form method="post" class="position-absolute" style="top: 50%; left: -45px; transform: translateY(-50%);">
                    <button type="submit" class="btn btn-outline-secondary" name="move" value="@($"{Model.Game.State.GridX-1},{Model.Game.State.GridY}")">
                        <i class="bi bi-arrow-left"></i>
                    </button>
                    <input type="hidden" name="action" value="@EGameAction.MoveGrid" />
                </form>
            }
            
            @if (Model.Game.State.GridX < Model.Game.Configuration.BoardWidth - Model.Game.Configuration.GridWidth)
            {
                <form method="post" class="position-absolute" style="top: 50%; right: -45px; transform: translateY(-50%);">
                    <button type="submit" class="btn btn-outline-secondary" name="move" value="@($"{Model.Game.State.GridX+1},{Model.Game.State.GridY}")">
                        <i class="bi bi-arrow-right"></i>
                    </button>
                    <input type="hidden" name="action" value="@EGameAction.MoveGrid" />
                </form>
            }
            
            @if (Model.Game.State.GridY < Model.Game.Configuration.BoardHeight - Model.Game.Configuration.GridHeight)
            {
                <form method="post" class="position-absolute" style="bottom: -45px; left: 50%; transform: translateX(-50%);">
                    <button type="submit" class="btn btn-outline-secondary" name="move" value="@($"{Model.Game.State.GridX},{Model.Game.State.GridY+1}")">
                        <i class="bi bi-arrow-down"></i>
                    </button>
                    <input type="hidden" name="action" value="@EGameAction.MoveGrid" />
                </form>
            }
        }
    
        <div class="mx-auto" 
             style="width: 100%; max-width: 500px; display: grid; grid-template-columns: repeat(@Model.Game.Configuration.BoardWidth, 1fr); gap: 2px; justify-content: center;">
            @for (var y = 0; y < Model.Game.Configuration.BoardHeight; y++)
            {
                @for (var x = 0; x < Model.Game.Configuration.BoardWidth; x++)
                {
                    bool isInActiveGrid = x >= Model.Game.State.GridX && x < Model.Game.State.GridX + Model.Game.Configuration.GridWidth &&
                                         y >= Model.Game.State.GridY && y < Model.Game.State.GridY + Model.Game.Configuration.GridHeight;
                    
                    bool isSelectedMarker = !string.IsNullOrEmpty(Model.SelectedMarker) && 
                                           x == Model.ParseMove(Model.SelectedMarker).x && 
                                           y == Model.ParseMove(Model.SelectedMarker).y;
                    
                    string cellClass = isSelectedMarker 
                        ? "border border-warning border-3 bg-warning bg-opacity-25" 
                        : (isInActiveGrid 
                            ? "border border-primary border-2 bg-light" 
                            : "border border-secondary bg-secondary bg-opacity-10");
                    
                    <div class="@cellClass" style="aspect-ratio: 1/1; display: flex;">
                        <form method="post" style="width: 100%; height: 100%; margin: 0;">
                            <button
                                class="w-100 h-100 border-0 bg-transparent"
                                type="submit"
                                name="move"
                                value="@($"{x},{y}")"
                                @if (!Model.Game.IsUsersTurn(Model.UserPlayerType) || (!isInActiveGrid && string.IsNullOrEmpty(Model.SelectedMarker)))
                                {
                                    <text>disabled</text>
                                }>
                                @if (Model.Game.State.GameBoard[x][y] == EGamePiece.Player1)
                                {
                                    <span style="color: #dc3545; font-weight: bold; font-size: 1.2rem;">X</span>
                                }
                                else if (Model.Game.State.GameBoard[x][y] == EGamePiece.Player2)
                                {
                                    <span style="color: #0d6efd; font-weight: bold; font-size: 1.2rem;">O</span>
                                }
                                else
                                {
                                    @Model.Game.State.GameBoard[x][y].ToSymbol()
                                }
                            </button>
                            
                            @if (!string.IsNullOrEmpty(Model.SelectedMarker))
                            {
                                <input type="hidden" name="action" value="@EGameAction.MoveMarker" />
                                <input asp-for="SelectedMarker" type="hidden" />
                                
                                @if (isSelectedMarker)
                                {
                                    <input type="hidden" name="deselect" value="true" />
                                }
                            }
                            else if (Model.Game.CanPerformSpecialMoves() && Model.Game.State.GameBoard[x][y] == Model.Game.State.NextMoveBy)
                            {
                                <input type="hidden" name="action" value="@EGameAction.MoveMarker" />
                            }
                            else
                            {
                                <input type="hidden" name="action" value="@EGameAction.PlaceMarker" />
                            }
                        </form>
                    </div>
                }
            }
        </div>
    </div>

    <div class="text-end mt-3">
        <a asp-page="/Index" class="btn btn-outline-secondary">Home</a>
    </div>
}

<script>
    function copyGameLink(gameName) {
        const baseUrl = window.location.origin + '/Play/' + gameName;
        navigator.clipboard.writeText(baseUrl).then(() => {
            alert('Game link copied to clipboard!');
        }).catch(err => {
            console.error('Failed to copy game link:', err);
            alert('Failed to copy the game link.');
        });
    }
</script>
